import streamlit as st
import sys
import os

# Adicionar o diret√≥rio ui ao path para importar os m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from api_client import check_api_health, search_documents
from styles import configure_page, render_header
from session_manager import SessionManager

# Configura√ß√£o da p√°gina
configure_page("Busca Sem√¢ntica", "üîç")


def main():
    # Verificar sess√£o
    if SessionManager.is_session_expired():
        st.error("‚ö†Ô∏è Sua sess√£o expirou! Clique em 'Nova Sess√£o' na barra lateral.")
        SessionManager.render_session_info()
        return

    # Renderizar informa√ß√µes da sess√£o na sidebar
    SessionManager.render_session_info()

    # Header principal
    render_header()

    # Verifica√ß√£o da API
    if not check_api_health():
        st.error("‚ö†Ô∏è API n√£o est√° dispon√≠vel. Verifique se os servi√ßos est√£o rodando.")
        st.code("docker-compose up -d")
        return

    st.header("üîç Busca Sem√¢ntica")
    st.write("Encontre informa√ß√µes espec√≠ficas nos seus documentos.")

    search_query = st.text_input(
        "O que voc√™ est√° procurando?",
        placeholder="Ex: contratos de 2023, valores acima de 10000, documentos de pessoa f√≠sica",
    )

    col1, col2 = st.columns([3, 1])
    with col1:
        limit = st.slider("N√∫mero de resultados:", 1, 10, 5)

    if st.button("üîç Buscar", type="primary") and search_query:
        with st.spinner("Buscando..."):
            session_id = SessionManager.get_session_id()
            results = search_documents(search_query, session_id, limit)

            if results and results.get("results"):
                st.markdown(f"### üìã {len(results['results'])} resultados encontrados")

                for i, result in enumerate(results["results"], 1):
                    with st.container():
                        st.markdown(
                            f"**Resultado {i}** - Relev√¢ncia: {result['score']:.2f}"
                        )
                        st.markdown(
                            f"**Documento:** {result.get('document_id', 'Sem ID')[:8]}..."
                        )
                        st.markdown(
                            f"**Conte√∫do:** {result.get('chunk_text', 'Texto n√£o dispon√≠vel')}"
                        )

                        # Mostrar informa√ß√µes adicionais se dispon√≠veis
                        if result.get("chunk_index") is not None:
                            st.caption(f"Chunk #{result['chunk_index']}")

                        st.divider()
            else:
                st.info("Nenhum resultado encontrado.")


if __name__ == "__main__":
    main()
